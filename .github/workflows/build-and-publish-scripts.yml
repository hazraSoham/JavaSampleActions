name: Build and Zip scripts

permissions:
  contents: write      # Required for creating releases and tags
  packages: write      # Required for uploading artifacts
  issues: write        # Required for creating release notes
  actions: read        # Required for workflow operations
  security-events: write  # If you want to keep CodeQL analysis capability

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Select the Project to Build'
        required: true
        type: choice
        options:
          - ScriptsA
          - ScriptsB
        default: 'ScriptsA'
      action_type:
        description: 'Select Action Type'
        required: true
        type: choice
        options:
          - Build
          - Build & Release
        default: 'Build'
      version_type:
        description: 'Version update type (only for Release)'
        required: false
        type: choice
        options:
          - MAJOR
          - MINOR
          - PATCH
        default: 'PATCH'

jobs:
  validate-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set script path
        id: project-path
        run: |
          cd Scripts/${{ github.event.inputs.project }}
          for scripts in *.ksh; do
            if [ -f "$script" ]; then 
              echo "Validating $script" ksh -n "$script" 
              if [ $? -ne 0 ]; then 
                echo "Syntax error in $script"
                exit 1
              fi
            fi
          done

  zip-and-release:
    needs: validate-scripts
    if: ${{ github.event.inputs.action_type == 'Build & Release' && needs.validate-scripts.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for git history
    
      - name: Configure Git user
        run: |
            git config user.email "github-actions@github.com"
            git config user.name "GitHub Actions"
            
      - name: Get Current Version
        id: version
        run: |
            latest_tag=$(git describe --tags --match "Scripts-${{ github.event.inputs.project }}-v*" --abbrev=0 2>/dev/null || echo "Scripts-${{ github.event.inputs.project }}-v0.0.0")

            # Get current version (removing -SNAPSHOT if present)
            CURRENT_VERSION=$(echo "$latest_tag" | sed -e 's/^Scripts-${{ github.event.inputs.project }}-v//')
            
            # Calculate new version based on version type
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            if [ "${{ github.event.inputs.version_type }}" = "MAJOR" ]; then
              NEW_VERSION="$((MAJOR + 1)).0.0"
            elif [ "${{ github.event.inputs.version_type }}" = "MINOR" ]; then
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            else
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            fi
            echo "release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
      - name: ZIP artifact for deployment
        run: |
          cd Scripts
          zip -r Scripts-${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}.zip ./${{ github.event.inputs.project }}

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: Scripts-${{ github.event.inputs.project }}-artifact
          path: Scripts/Scripts-${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}.zip
          retention-days: 1

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            # Set variables
            RELEASE_TAG="Scripts-${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}"
            LATEST_TAG="Scripts-${{ github.event.inputs.project }}-latest"
            ZIP_PATH="Scripts/Scripts-${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}.zip"
            
            # Create the release tag first
            git tag "$RELEASE_TAG"
            git push origin "$RELEASE_TAG"
            
            echo "Creating version release..."
            gh release create "$RELEASE_TAG" \
                "$ZIP_PATH" \
                --title "Scripts-${{ github.event.inputs.project }} v${{ steps.version.outputs.release_version }}" \
                --notes "
              ## ðŸš€ ${{ github.event.inputs.project }} v${{ steps.version.outputs.release_version }}

              ### ðŸ“¢ Release Overview  

              This release of **${{ github.event.inputs.project }}** (version **${{ steps.version.outputs.release_version }}**) was automatically generated by **GitHub Actions**.  

              ðŸ”¹Latest version always available at:
              [ðŸ“¥ Latest Release](https://github.com/${{ github.repository }}/releases/tag/$LATEST_TAG)  

              ---

              âœ… **Stay Updated:** Follow this repository to receive notifications about new releases and updates.  
              ðŸ“¢ **Feedback & Issues:** Found a bug or have a suggestion? [Create an issue](https://github.com/${{ github.repository }}/issues)."
            
            echo "Handling latest tag..."
            if gh release view "$LATEST_TAG" &>/dev/null; then
              gh release delete "$LATEST_TAG" --yes
            fi
          
            git tag -d "$LATEST_TAG" || true
            git push origin ":refs/tags/$LATEST_TAG" || true  # Delete remote tag if it exists
            git tag "$LATEST_TAG"
            git push origin "$LATEST_TAG"
          
            echo "Creating latest release..."
            gh release create "$LATEST_TAG" \
                "$ZIP_PATH" \
                --title "Scripts-${{ github.event.inputs.project }} (Latest Release)" \
                --notes "
              ## ðŸš€ Scripts-${{ github.event.inputs.project }} - Latest Release
              ### ðŸ“Œ Version: v${{ steps.version.outputs.release_version }}

              This is an automatically updated reference to the latest version of Scripts-${{ github.event.inputs.project }}

              #### ðŸ”— Specific Version Release  
              For details on this version, visit:
              [ðŸ“¥ Scripts-${{ github.event.inputs.project }} v${{ steps.version.outputs.release_version }} Release](https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG)  

              ---

              âœ… **Stay Updated:** Follow this repository to receive notifications about new releases and updates.  
              ðŸ“¢ **Feedback & Issues:** Found a bug or have a suggestion? [Create an issue](https://github.com/${{ github.repository }}/issues)."
      
      - name: Update version badge
        run: |
          # Extract new version
          NEW_VERSION="${{ steps.version.outputs.release_version }}"

          # Define path based on selected project
          BADGE_PATH="Scripts/${{ github.event.inputs.project }}/version-badge.svg"
          
          # Update SVG version text with sed
          sed -i 's/<!-- VERSION_PLACEHOLDER -->.*<!-- VERSION_PLACEHOLDER -->/<!-- VERSION_PLACEHOLDER -->'$NEW_VERSION'<!-- VERSION_PLACEHOLDER -->/g' "$BADGE_PATH"

          # Add timestamp to README.md SVG reference to prevent caching
          # TIMESTAMP=$(date +%s)
          # sed -i "s|${{ github.event.inputs.project }}/version-badge.svg[^)]*|${{ github.event.inputs.project }}/version-badge.svg?v=$TIMESTAMP|g" README.md
    
          
          # Commit and push the updated badge
          git add "$BADGE_PATH"
          git commit -m "Update version badge to $NEW_VERSION" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}