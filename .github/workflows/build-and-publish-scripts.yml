name: Build and Zip scripts

# For CodeQL Analysis
permissions:
  security-events: write
  actions: read
  contents: read


on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Select the Project to Build'
        required: true
        type: choice
        options:
          - ScriptsA
          - ScriptsB
        default: 'ScriptsA'
      action_type:
        description: 'Select Action Type'
        required: true
        type: choice
        options:
          - Build
          - Build & Release
        default: 'Build'
      version_type:
        description: 'Version update type (only for Release)'
        required: false
        type: choice
        options:
          - MAJOR
          - MINOR
          - PATCH
        default: 'PATCH'


jobs:
  validate-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set script path
        id: project-path
        run: |
          cd Scripts/${{ github.event.inputs.project }}
          for scripts in *.ksh; do
            if [ -f "$script" ]; then 
              echo "Validating $script" ksh -n "$script" 
              if [ $? -ne 0 ]; then 
                echo "Syntax error in $script"
                exit 1
              fi
            fi
          done

  zip-and-release:
    needs: validate-scripts
    if: ${{ github.event.inputs.action_type == 'Build & Release' && needs.validate-scripts.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Configure Git user
        run: |
            git config user.email "github-actions@github.com"
            git config user.name "GitHub Actions"
            
            
      - name: Get Current Version
        id: version
        run: |
            latest_tag=$(git describe --tags --match "Scripts-ScriptsA-v*" --abbrev=0 2>/dev/null || echo "Scripts-ScriptsA-v0.0.0")

            # Get current version (removing -SNAPSHOT if present)
            CURRENT_VERSION=$(echo "$latest_tag" | sed -e 's/^Scripts-${{ github.event.inputs.project }}-v//')
            
            # Calculate new version based on version type
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            if [ "${{ github.event.inputs.version_type }}" = "MAJOR" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
            elif [ "${{ github.event.inputs.version_type }}" = "MINOR" ]; then
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            else
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            fi
            echo "release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
      - name: ZIP artifact for deployment
        run: |
          zip -r Scripts-${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}.zip Scripts/${{ github.event.inputs.project }}


      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: Scripts-${{ github.event.inputs.project }}-artifact
          path: ".zip"
          retention-days: 1


      - name: Create Release
        env:
          GITHUB TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            #Set variables
            RELEASE_TAG "Scripts-${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}"
            LATEST_TAG-"Scripts-$(( github.event.inputs.project }}-latest"
            ZIP_PATH-$(find artifacts -name **.zip')
            
            echo "Creating version release..."
            
            gh release create "$RELEASE TAG" \
                "$ZIP_PATH" \
                --title "Scripts-$(( github.event.inputs.project }} v$({ steps.version.outputs.release_version}}" \
                --notes "Release of Scripts-$(( github.event.inputs.project )) version ${{ steps.version.outputs.release_version }}"
                
                This release was automatically generated by GitHub Actions.
            
                Latest version is always available at:
                https://github.com/${{ github.repository }}/releases/tag/$LATEST_TAG" \
                --target ${{ github.sha }}
            
            
            echo "Handling latest tag..."
            if gh release view "$LATEST_TAG" &>/dev/null; then
              gh release delete "$LATEST_TAG" --yes
            fi
          
            git tag -d "$LATEST_TAG" || true
            git tag "$LATEST_TAG" ${{ github.sha }}
            git push origin "$LATEST_TAG" --force
          
            echo "Creating latest release..."
            gh release create "$LATEST_TAG" \
                "$ZIP_PATH" \
                --title "${{ github.event.inputs.project }} (Latest Release)" \
                --notes "This is the latest release of ${{ github.event.inputs.project }} (v${{ steps.version.outputs.release_version }}).
            
                This is an automatically updated reference to the latest version.
                For the specific version release, see:
                https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG" \
                --target ${{ github.sha }}