name: Build and Release Java Projects

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Select project to build'
        required: true
        type: choice
        options:
          - projectA
          - projectB
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - RELEASE
          - DRY_RUN
          - NONE
      version_type:
        description: 'Version update type (only for RELEASE)'
        required: false
        type: choice
        options:
          - MAJOR
          - MINOR
          - PATCH
        default: 'MINOR'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build project
        run: |
          cd ${{ github.event.inputs.project }}
          mvn clean package -Dmaven.install.skip=true -Dmaven.source.skip=true -Dmaven.javadoc.skip=true

      - name: Upload Artifact
        if: ${{ github.event.inputs.build_type == 'RELEASE' && success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.project }}-artifact
          path: ${{ github.event.inputs.project }}/target/*.jar
          retention-days: 1

  release:
    needs: build
    if: ${{ github.event.inputs.build_type == 'RELEASE' && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Configure Git user
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"

      - name: Get Current Version
        id: version
        run: |
          cd ${{ github.event.inputs.project }}
          # Get current version (removing -SNAPSHOT if present)
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          CURRENT_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          
          # Calculate new version based on version type
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          if [ "${{ github.event.inputs.version_type }}" = "MAJOR" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ github.event.inputs.version_type }}" = "MINOR" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "release_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "next_dev_version=$NEW_VERSION-SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.project }}-artifact
          path: artifacts

          
      - name: Update Version for Release
        run: |
          cd ${{ github.event.inputs.project }}
          mvn versions:set -DnewVersion=${{ steps.version.outputs.release_version }}
          mvn versions:commit
          git add pom.xml
          git commit -m "Prepare release version ${{ steps.version.outputs.release_version }}"
          git push


      - name: Create Release and Handle Latest Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Set variables
          RELEASE_TAG="${{ github.event.inputs.project }}-v${{ steps.version.outputs.release_version }}"
          LATEST_TAG="${{ github.event.inputs.project }}-latest"
          JAR_PATH=$(find artifacts -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar')
          
          echo "Creating version release..."
          gh release create "$RELEASE_TAG" \
            "$JAR_PATH" \
            --title "${{ github.event.inputs.project }} v${{ steps.version.outputs.release_version }}" \
            --notes "Release of ${{ github.event.inputs.project }} version ${{ steps.version.outputs.release_version }}

            This release was automatically generated by GitHub Actions.
            
            Latest version is always available at:
            https://github.com/${{ github.repository }}/releases/tag/$LATEST_TAG" \
            --target ${{ github.sha }}
          
          echo "Handling latest tag..."
          if gh release view "$LATEST_TAG" &>/dev/null; then
            gh release delete "$LATEST_TAG" --yes
          fi
          
          git tag -d "$LATEST_TAG" || true
          git tag "$LATEST_TAG" ${{ github.sha }}
          git push origin "$LATEST_TAG" --force
          
          echo "Creating latest release..."
          gh release create "$LATEST_TAG" \
            "$JAR_PATH" \
            --title "${{ github.event.inputs.project }} (Latest Release)" \
            --notes "This is the latest release of ${{ github.event.inputs.project }} (v${{ steps.version.outputs.release_version }}).
            
            This is an automatically updated reference to the latest version.
            For the specific version release, see:
            https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG" \
            --target ${{ github.sha }}

      - name: Update to next development version
        if: success()
        run: |
          cd ${{ github.event.inputs.project }}
          mvn versions:set -DnewVersion=${{ steps.version.outputs.next_dev_version }}
          mvn versions:commit
          git add pom.xml
          git commit -m "Prepare for next development version ${{ steps.version.outputs.next_dev_version }}"
          git push