name: Build and Release Java Projects

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Select project to build'
        required: true
        type: choice
        options:
          - projectA
          - projectB
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - RELEASE
          - DRY_RUN
          - NONE

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Configure Git user
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"

      - name: Build project
        run: |
          cd ${{ github.event.inputs.project }}
          mvn clean verify

      - name: Prepare Release
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
          cd ${{ github.event.inputs.project }}
          # Get current version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version (increment minor version)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Update version in pom.xml
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
          
          # Commit version change
          git add pom.xml
          git commit -m "Release version $NEW_VERSION"
          git push

      - name: Build Release Artifact
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
          cd ${{ github.event.inputs.project }}
          mvn clean package
          echo "JAR_FILE=$(find target/ -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar')" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ github.event.inputs.project }}/${{ env.JAR_FILE }}
          tag_name: ${{ github.event.inputs.project }}-v${{ env.NEW_VERSION }}
          name: "${{ github.event.inputs.project }} v${{ env.NEW_VERSION }}"
          body: |
            Release of ${{ github.event.inputs.project }} version ${{ env.NEW_VERSION }}
            
            This release was automatically generated by GitHub Actions.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}