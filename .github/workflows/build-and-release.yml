name: Build and Release Java Projects

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Select project to build'
        required: true
        type: choice
        options:
          - projectA
          - projectB
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - RELEASE
          - DRY_RUN
          - NONE
      version_type:
        description: 'Version update type (only for RELEASE)'
        required: false
        type: choice
        options:
          - MAJOR
          - MINOR
          - PATCH
        default: 'PATCH'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Configure Git user
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"

      - name: Build project
        run: |
          cd ${{ github.event.inputs.project }}
          mvn clean verify

      - name: Prepare Release
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
          cd ${{ github.event.inputs.project }}
          # Get current version (removing -SNAPSHOT if present)
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          CURRENT_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version based on version type
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          if [ "${{ github.event.inputs.version_type }}" = "MAJOR" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ github.event.inputs.version_type }}" = "MINOR" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          echo "New version: $NEW_VERSION"
          
          # Store versions in environment
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEXT_DEV_VERSION=$NEW_VERSION-SNAPSHOT" >> $GITHUB_ENV
          
          # First set the release version (without SNAPSHOT)
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
          
          # Commit release version
          git add pom.xml
          git commit -m "Prepare ${{ github.event.inputs.project }} release version $NEW_VERSION"
          git push

      - name: Build Release Artifact
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
          cd ${{ github.event.inputs.project }}
          mvn clean package
          echo "JAR_FILE=$(find target/ -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar' -exec basename {} \;)" >> $GITHUB_ENV
          echo "JAR_PATH=$(find target/ -name '*.jar' ! -name '*-sources.jar' ! -name '*-javadoc.jar')" >> $GITHUB_ENV

      - name: Create Release and Upload Asset
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release
          gh release create \
            "${{ github.event.inputs.project }}-v${{ env.RELEASE_VERSION }}" \
            "${{ github.event.inputs.project }}/${{ env.JAR_PATH }}" \
            --title "${{ github.event.inputs.project }} v${{ env.RELEASE_VERSION }}" \
            --notes "Release of ${{ github.event.inputs.project }} version ${{ env.RELEASE_VERSION }}

            This release was automatically generated by GitHub Actions." \
            --target ${{ github.sha }}
        
      - name: Clean Release
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
            release_id=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq '.id')
            assets=$(gh api repos/${{ github.repository }}/releases/$release_id/assets --jq '.[] | select(.name | test("source")) | .id')
            for asset_id in $assets; do
            gh api repos/${{ github.repository }}/releases/assets/$asset_id -X DELETE
            done
  
      - name: Update to next development version
        if: ${{ github.event.inputs.build_type == 'RELEASE' }}
        run: |
            cd ${{ github.event.inputs.project }}
            # Set the next development version (with SNAPSHOT)
            mvn versions:set -DnewVersion=${{ env.NEXT_DEV_VERSION }}
            mvn versions:commit
            
            # Commit next development version
            git add pom.xml
            git commit -m "Prepare ${{ github.event.inputs.project }} for next development version ${{ env.NEXT_DEV_VERSION }}"
            git push